import { Configuration } from '../configuration';
import { ApiKeyTokensListResponse } from '../models/ApiKeyTokensListResponse';
import { App } from '../models/App';
import { CopyTemplateRequest } from '../models/CopyTemplateRequest';
import { CreateApiKeyRequest } from '../models/CreateApiKeyRequest';
import { CreateApiKeyResponse } from '../models/CreateApiKeyResponse';
import { CreateNotificationSuccessResponse } from '../models/CreateNotificationSuccessResponse';
import { CreateSegmentSuccessResponse } from '../models/CreateSegmentSuccessResponse';
import { CreateTemplateRequest } from '../models/CreateTemplateRequest';
import { CustomEventsRequest } from '../models/CustomEventsRequest';
import { ExportEventsSuccessResponse } from '../models/ExportEventsSuccessResponse';
import { ExportSubscriptionsRequestBody } from '../models/ExportSubscriptionsRequestBody';
import { ExportSubscriptionsSuccessResponse } from '../models/ExportSubscriptionsSuccessResponse';
import { GenericSuccessBoolResponse } from '../models/GenericSuccessBoolResponse';
import { GetNotificationHistoryRequestBody } from '../models/GetNotificationHistoryRequestBody';
import { GetSegmentsSuccessResponse } from '../models/GetSegmentsSuccessResponse';
import { Notification } from '../models/Notification';
import { NotificationHistorySuccessResponse } from '../models/NotificationHistorySuccessResponse';
import { NotificationSlice } from '../models/NotificationSlice';
import { NotificationWithMeta } from '../models/NotificationWithMeta';
import { OutcomesData } from '../models/OutcomesData';
import { PropertiesBody } from '../models/PropertiesBody';
import { Segment } from '../models/Segment';
import { StartLiveActivityRequest } from '../models/StartLiveActivityRequest';
import { StartLiveActivitySuccessResponse } from '../models/StartLiveActivitySuccessResponse';
import { SubscriptionBody } from '../models/SubscriptionBody';
import { TemplateResource } from '../models/TemplateResource';
import { TemplatesListResponse } from '../models/TemplatesListResponse';
import { TransferSubscriptionRequestBody } from '../models/TransferSubscriptionRequestBody';
import { UpdateApiKeyRequest } from '../models/UpdateApiKeyRequest';
import { UpdateLiveActivityRequest } from '../models/UpdateLiveActivityRequest';
import { UpdateLiveActivitySuccessResponse } from '../models/UpdateLiveActivitySuccessResponse';
import { UpdateTemplateRequest } from '../models/UpdateTemplateRequest';
import { UpdateUserRequest } from '../models/UpdateUserRequest';
import { User } from '../models/User';
import { UserIdentityBody } from '../models/UserIdentityBody';
import { DefaultApiRequestFactory, DefaultApiResponseProcessor } from "../apis/DefaultApi";
export declare class PromiseDefaultApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DefaultApiRequestFactory, responseProcessor?: DefaultApiResponseProcessor);
    cancelNotification(appId: string, notificationId: string, _options?: Configuration): Promise<GenericSuccessBoolResponse>;
    copyTemplateToApp(templateId: string, appId: string, copyTemplateRequest: CopyTemplateRequest, _options?: Configuration): Promise<TemplateResource>;
    createAlias(appId: string, aliasLabel: string, aliasId: string, userIdentityBody: UserIdentityBody, _options?: Configuration): Promise<UserIdentityBody>;
    createAliasBySubscription(appId: string, subscriptionId: string, userIdentityBody: UserIdentityBody, _options?: Configuration): Promise<UserIdentityBody>;
    createApiKey(appId: string, createApiKeyRequest: CreateApiKeyRequest, _options?: Configuration): Promise<CreateApiKeyResponse>;
    createApp(app: App, _options?: Configuration): Promise<App>;
    createCustomEvents(appId: string, customEventsRequest: CustomEventsRequest, _options?: Configuration): Promise<object>;
    createNotification(notification: Notification, _options?: Configuration): Promise<CreateNotificationSuccessResponse>;
    createSegment(appId: string, segment?: Segment, _options?: Configuration): Promise<CreateSegmentSuccessResponse>;
    createSubscription(appId: string, aliasLabel: string, aliasId: string, subscriptionBody: SubscriptionBody, _options?: Configuration): Promise<SubscriptionBody>;
    createTemplate(createTemplateRequest: CreateTemplateRequest, _options?: Configuration): Promise<TemplateResource>;
    createUser(appId: string, user: User, _options?: Configuration): Promise<User>;
    deleteAlias(appId: string, aliasLabel: string, aliasId: string, aliasLabelToDelete: string, _options?: Configuration): Promise<UserIdentityBody>;
    deleteApiKey(appId: string, tokenId: string, _options?: Configuration): Promise<object>;
    deleteSegment(appId: string, segmentId: string, _options?: Configuration): Promise<GenericSuccessBoolResponse>;
    deleteSubscription(appId: string, subscriptionId: string, _options?: Configuration): Promise<void>;
    deleteTemplate(templateId: string, appId: string, _options?: Configuration): Promise<GenericSuccessBoolResponse>;
    deleteUser(appId: string, aliasLabel: string, aliasId: string, _options?: Configuration): Promise<void>;
    exportEvents(notificationId: string, appId: string, _options?: Configuration): Promise<ExportEventsSuccessResponse>;
    exportSubscriptions(appId: string, exportSubscriptionsRequestBody?: ExportSubscriptionsRequestBody, _options?: Configuration): Promise<ExportSubscriptionsSuccessResponse>;
    getAliases(appId: string, aliasLabel: string, aliasId: string, _options?: Configuration): Promise<UserIdentityBody>;
    getAliasesBySubscription(appId: string, subscriptionId: string, _options?: Configuration): Promise<UserIdentityBody>;
    getApp(appId: string, _options?: Configuration): Promise<App>;
    getApps(_options?: Configuration): Promise<Array<App>>;
    getNotification(appId: string, notificationId: string, _options?: Configuration): Promise<NotificationWithMeta>;
    getNotificationHistory(notificationId: string, getNotificationHistoryRequestBody: GetNotificationHistoryRequestBody, _options?: Configuration): Promise<NotificationHistorySuccessResponse>;
    getNotifications(appId: string, limit?: number, offset?: number, kind?: 0 | 1 | 3, _options?: Configuration): Promise<NotificationSlice>;
    getOutcomes(appId: string, outcomeNames: string, outcomeNames2?: string, outcomeTimeRange?: string, outcomePlatforms?: string, outcomeAttribution?: string, _options?: Configuration): Promise<OutcomesData>;
    getSegments(appId: string, offset?: number, limit?: number, _options?: Configuration): Promise<GetSegmentsSuccessResponse>;
    getUser(appId: string, aliasLabel: string, aliasId: string, _options?: Configuration): Promise<User>;
    rotateApiKey(appId: string, tokenId: string, _options?: Configuration): Promise<CreateApiKeyResponse>;
    startLiveActivity(appId: string, activityType: string, startLiveActivityRequest: StartLiveActivityRequest, _options?: Configuration): Promise<StartLiveActivitySuccessResponse>;
    transferSubscription(appId: string, subscriptionId: string, transferSubscriptionRequestBody: TransferSubscriptionRequestBody, _options?: Configuration): Promise<UserIdentityBody>;
    unsubscribeEmailWithToken(appId: string, notificationId: string, token: string, _options?: Configuration): Promise<GenericSuccessBoolResponse>;
    updateApiKey(appId: string, tokenId: string, updateApiKeyRequest: UpdateApiKeyRequest, _options?: Configuration): Promise<object>;
    updateApp(appId: string, app: App, _options?: Configuration): Promise<App>;
    updateLiveActivity(appId: string, activityId: string, updateLiveActivityRequest: UpdateLiveActivityRequest, _options?: Configuration): Promise<UpdateLiveActivitySuccessResponse>;
    updateSubscription(appId: string, subscriptionId: string, subscriptionBody: SubscriptionBody, _options?: Configuration): Promise<void>;
    updateSubscriptionByToken(appId: string, tokenType: string, token: string, subscriptionBody: SubscriptionBody, _options?: Configuration): Promise<object>;
    updateTemplate(templateId: string, appId: string, updateTemplateRequest: UpdateTemplateRequest, _options?: Configuration): Promise<TemplateResource>;
    updateUser(appId: string, aliasLabel: string, aliasId: string, updateUserRequest: UpdateUserRequest, _options?: Configuration): Promise<PropertiesBody>;
    viewApiKeys(appId: string, _options?: Configuration): Promise<ApiKeyTokensListResponse>;
    viewTemplate(templateId: string, appId: string, _options?: Configuration): Promise<TemplateResource>;
    viewTemplates(appId: string, limit?: number, offset?: number, channel?: 'push' | 'email' | 'sms', _options?: Configuration): Promise<TemplatesListResponse>;
}
