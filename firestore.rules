rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ‚úÖ Helper: only Tier1 users can do finance
    function isTier1(userId) {
      return request.auth != null
             && request.auth.uid == userId
             && get(/databases/$(database)/documents/users/$(userId)).data.kycStatus == "Verified";
    }

    // üîπ Users collection
    match /users/{userId} {
      allow read: if true; // public profiles visible
      allow write: if request.auth != null && request.auth.uid == userId;

      // ü™™ KYC Documents (subcollection)
      match /kycDocuments/{docId} {
        allow create: if request.auth != null
                       && request.auth.uid == userId
                       && request.resource.data.keys().hasAll([
                          "idType", "idNumber", "filePath", "status"
                        ])
                       && request.resource.data.status == "pending";
        allow read: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if false;
      }

      // üîπ Scheduled payments
      match /scheduledPayments/{paymentId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create, update, delete: if isTier1(userId);
      }

      // üîπ Transactions (user-private copy)
      match /transactions/{txnId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if isTier1(userId);
        allow update, delete: if false;
      }

      // üîπ Virtual Cards
      match /cards/{cardId} {
        allow read, update, delete: if isTier1(userId);
        allow create: if isTier1(userId)
                      && request.resource.data.keys().hasAll([
                          "currency", "cardType", "last4", "expiry", "status"
                        ]);
      }

      // üîπ Wallets
      match /wallets/{walletId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if isTier1(userId)
                      && request.resource.data.keys().hasAll([
                          "currency", "balance", "status"
                        ]);
        allow update, delete: if isTier1(userId);
      }

      // üîî Notifications
      match /notifications/{notifId} {
        allow read, create, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if false;
      }
      
      // üîπ Save & Invest Collections
      match /savings_plans/{planId} {
        allow list, read, create, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if false;
      }

      match /autosave_rules/{ruleId} {
        allow read, create, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if false;
      }

      match /autosave_logs/{logId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
      }
      
      match /user_investments/{recordId} {
        allow read, create, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if false;
      }
      
       match /withdrawals/{withdrawalId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if false;
      }
    }

    // ‚úÖ Global Transactions (for dispute verification)
    match /transactions/{transactionId} {
      allow read: if request.auth != null;   // any logged-in user can verify tx
      allow write: if false;                 // prevent tampering
    }

    // ‚úÖ Global Escrow (for dispute verification)
    match /escrow/{escrowId} {
      allow read: if request.auth != null; 
      allow write: if false;
    }

    // ‚úÖ Disputes
    match /disputes/{disputeId} {
      allow create: if request.auth != null; 
      allow read, list: if request.auth != null &&
                  (resource.data.userId == request.auth.uid ||
                   request.auth.token.admin == true);
      allow update, delete: if false;
    }

    // üîπ Invoices (for individual users)
    match /invoices/{invoiceId} {
      allow read: if resource.data.isPublic == true ||
                  (request.auth != null && request.auth.uid == resource.data.userId);
      allow list: if request.auth != null; // ‚úÖ allows user to query their invoices
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // üè¢ Business Invoices (for registered businesses)
    match /businessInvoices/{invoiceId} {

      // ‚úÖ Public invoice access
      // TEMPORARY DEBUG: relax public reads so we can confirm whether rules are the blocker.
      // IMPORTANT: revert this change after debugging.
      allow get: if resource.data.isPublic == true ||
                  (request.auth != null && request.auth.uid == resource.data.createdBy);

      // ‚úÖ List invoices (authenticated users only)
      // Must always query with: where("createdBy", "==", user.uid)
      allow list: if request.auth != null;

  // ‚úÖ Create invoice (only verified business users)
  allow create: if isTier1(request.auth.uid) &&
         request.resource.data.createdBy == request.auth.uid &&
         request.resource.data.businessId is string;

      // ‚úÖ Update / Delete invoice (only creator)
      allow update, delete: if request.auth != null &&
                             request.auth.uid == resource.data.createdBy;
    }

    // üîπ Donation campaigns
    match /donations/{campaignId} {
      allow read: if true;
      allow create: if request.auth != null &&
                    request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
                             resource.data.userId == request.auth.uid;

      match /contributions/{donationId} {
        allow read: if true;
        allow create: if true;
        allow update, delete: if false;
      }
    }

    // üîπ Payment requests
    match /paymentRequests/{requestId} {
      allow read: if true;
      allow create: if isTier1(request.auth.uid) &&
                     request.resource.data.userId == request.auth.uid;
      allow update, delete: if isTier1(request.auth.uid) &&
                             resource.data.userId == request.auth.uid;

      match /payments/{paymentId} {
        allow read: if true;
        allow create: if isTier1(request.auth.uid);
        allow update, delete: if false;
      }
    }

    // üîπ Events
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null &&
                    request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
                             resource.data.userId == request.auth.uid;

      match /tickets/{ticketId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false;
      }
    }
    
    // üåê Publicly Readable Content
    match /investment_listings/{investmentId} {
      allow read: if true;
      allow create, update, delete: if false;
    }
    
    match /education_articles/{articleId} {
      allow read: if true;
      allow write: if false;
    }

    match /market_news/{newsId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
